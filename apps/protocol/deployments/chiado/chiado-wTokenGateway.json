{
  "address": "0x3b070f69DeA86cb235845cd3CD6D93dB4eeF322e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InvalidValueSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gateway",
          "type": "address"
        }
      ],
      "name": "RecipientNotGateway",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipientAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "commitment",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreateProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "encryptedDataSender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedDataReceiver",
              "type": "bytes"
            }
          ],
          "internalType": "struct CreateData",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "contract IWToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unwrappedTokenReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "currentTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "publicAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "streamRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "checkpointRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "inCheckpointNullifier",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "outCheckpointCommitment",
              "type": "bytes32"
            }
          ],
          "internalType": "struct CheckpointProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "withdrawAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x66677d883b569eb89a34f9ac8a6d380add7bb2aea3493e46c1c4123623845036",
  "receipt": {
    "to": null,
    "from": "0xE6D21Ad1Ea84177F365aEcdDa15573916B548943",
    "contractAddress": "0x3b070f69DeA86cb235845cd3CD6D93dB4eeF322e",
    "transactionIndex": 0,
    "gasUsed": "973286",
    "logsBloom": "0x
    "blockHash": "0xb27fdecb5249f7b9bcd7c567c609104f8c8891816b8da99d15d691b3c28a52e3",
    "transactionHash": "0x66677d883b569eb89a34f9ac8a6d380add7bb2aea3493e46c1c4123623845036",
    "logs": [],
    "blockNumber": 2697728,
    "cumulativeGasUsed": "973286",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8D08ac9a511581C7e5BDf8CEd27b7353d0EB7e40"
  ],
  "numDeployments": 1,
  "solcInputHash": "68100c99fc1496735651412044663e73",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InvalidValueSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"RecipientNotGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipientAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedDataSender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedDataReceiver\",\"type\":\"bytes\"}],\"internalType\":\"struct CreateData\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"contract IWToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unwrappedTokenReceiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"streamRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"checkpointRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"inCheckpointNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"outCheckpointCommitment\",\"type\":\"bytes32\"}],\"internalType\":\"struct CheckpointProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WTokenGateway.sol\":\"WTokenGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/WTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IWToken.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IWTokenGateway.sol\\\";\\n\\nimport {CreateProofArgs, CheckpointProofArgs, ExtData} from \\\"./helpers/DataTypes.sol\\\";\\n\\ncontract WTokenGateway is IWTokenGateway {\\n    IWToken public immutable wToken;\\n\\n    constructor(address wToken_) {\\n        wToken = IWToken(wToken_);\\n    }\\n\\n    function create(\\n        address pool,\\n        CreateProofArgs calldata args,\\n        CreateData calldata data\\n    ) external payable {\\n        if (msg.value != args.publicAmount) {\\n            revert InvalidValueSent(msg.value, args.publicAmount);\\n        }\\n\\n        wToken.deposit{value: msg.value}();\\n        wToken.approve(pool, msg.value);\\n        IPool(pool).create(args, data);\\n    }\\n\\n    function withdraw(\\n        address pool,\\n        address unwrappedTokenReceiver,\\n        CheckpointProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external {\\n        if (extData.recipient != address(this)) {\\n            revert RecipientNotGateway(extData.recipient, address(this));\\n        }\\n\\n        IPool(pool).withdraw(args, extData);\\n        uint256 withdrawAmount = extData.withdrawAmount;\\n        wToken.approve(address(wToken), withdrawAmount);\\n        wToken.withdraw(withdrawAmount);\\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xc89cd07571752d48dd60418fff73fbee83a7de971c27874dba9f3604d4f4f4f5\",\"license\":\"MIT\"},\"contracts/helpers/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nstruct ExtData {\\n    address recipient;\\n    uint256 withdrawAmount;\\n    address relayer;\\n    uint256 fee;\\n    bytes encryptedData;\\n}\\n\\nstruct Proof {\\n    uint256[2] a;\\n    uint256[2][2] b;\\n    uint256[2] c;\\n}\\n\\nstruct CheckpointProofArgs {\\n    Proof proof;\\n    uint256 currentTime;\\n    uint256 publicAmount;\\n    bytes32 streamRoot;\\n    bytes32 checkpointRoot;\\n    bytes32 inCheckpointNullifier;\\n    bytes32 outCheckpointCommitment;\\n}\\n\\nstruct RevokeProofArgs {\\n    Proof proof;\\n    bytes32 root;\\n    bytes32 inputNullifier;\\n    bytes32 outputCommitment;\\n    bytes32 extDataHash;\\n    uint256 publicAmount;\\n    uint256 stopTime;\\n}\\n\\nstruct CreateData {\\n    bytes encryptedDataSender;\\n    bytes encryptedDataReceiver;\\n}\\n\\nstruct CreateProofArgs {\\n    Proof proof;\\n    bytes32 commitment;\\n    uint256 publicAmount;\\n}\\n\\nstruct TreeData {\\n    uint256 numLevels;\\n    mapping(uint256 => bytes32) lastSubtrees;\\n    mapping(uint256 => bytes32) roots;\\n    mapping(uint256 => bytes32) zeroes;\\n    uint32 currentRootIndex;\\n    uint32 nextLeafIndex;\\n}\\n\",\"keccak256\":\"0x2590968f329e9eb0b0a6c7e9728f4bfdd0d8267a0b8c4461efff851b888050c5\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {CreateData, CreateProofArgs, CheckpointProofArgs, ExtData} from \\\"../helpers/DataTypes.sol\\\";\\n\\ninterface IPool {\\n    event StreamInserted(\\n        bytes32 commitment,\\n        uint256 leafIndex,\\n        bytes encryptedDataSender,\\n        bytes encryptedDataReceiver\\n    );\\n\\n    event CheckpointInserted(bytes32 commitment, uint256 leafIndex, bytes encrytpedData);\\n\\n    event NullifierUsed(bytes32 nullifier);\\n\\n    error InvalidProof();\\n    error UnknownMerkleRoot();\\n    error InputNullifierAlreadyUsed(bytes32 usedNullifier);\\n    error InvalidExtDataHash(bytes32 extDataHash);\\n    error InvalidPublicAmount(uint256 publicAmount);\\n    error InvalidAmount(uint256 amount);\\n    error EarlyWithdraw(uint256 currentTime, uint256 blockTime);\\n    error ZeroRecipientAddress();\\n    error DepositAmountExceedsMaxLimit(uint256 amount, uint256 maxAmountAllowed);\\n    error FeeExceedsMaxLimit(uint256 fee, uint256 maxFeeAllowed);\\n    error ExtAmountExceedsMaxLimit(uint256 extAmount, uint256 maxExtAmountAllowed);\\n\\n    function create(CreateProofArgs calldata args, CreateData calldata data) external;\\n\\n    function withdraw(CheckpointProofArgs calldata args, ExtData calldata extData) external;\\n}\\n\",\"keccak256\":\"0xfb14472344d06c38b91b50f129a1870f3335d5c53d6b8f8a02c13ad409213a27\",\"license\":\"MIT\"},\"contracts/interfaces/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWToken is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x27facdeb9e8ef851febd4a9e4877bf98f91a1facba7c99b7f91035c5e6b2ce4c\",\"license\":\"MIT\"},\"contracts/interfaces/IWTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {CreateProofArgs, CreateData, CheckpointProofArgs, ExtData} from \\\"../helpers/DataTypes.sol\\\";\\n\\ninterface IWTokenGateway {\\n    error ZeroRecipientAddress();\\n    error InvalidValueSent(uint256 sent, uint256 required);\\n    error RecipientNotGateway(address recipient, address gateway);\\n\\n    function create(\\n        address pool,\\n        CreateProofArgs calldata args,\\n        CreateData calldata createData\\n    ) external payable;\\n\\n    function withdraw(\\n        address pool,\\n        address unwrappedTokenReceiver,\\n        CheckpointProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0af04666b9208300e279289ca17b59cc4ec5fa962592a5c820b6629f3ebae899\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011ed380380620011ed8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516110a16200014c6000396000818160b6015281816101e601528181610222015281816102a501528181610391015261041201526110a16000f3fe6080604052600436106100385760003560e01c80630babd86414610044578063aef1ad0a1461006f578063c8db673b146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100b4565b60405161006691906106a0565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610747565b6100d8565b005b6100b260048036038101906100ad919061080b565b61033f565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b3073ffffffffffffffffffffffffffffffffffffffff16816000016020810190610102919061087c565b73ffffffffffffffffffffffffffffffffffffffff161461016e57806000016020810190610130919061087c565b306040517fb52905ef0000000000000000000000000000000000000000000000000000000081526004016101659291906108b8565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16634a674fc883836040518363ffffffff1660e01b81526004016101a9929190610d3b565b600060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506000816020013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161025f929190610d7c565b6020604051808303816000875af115801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610ddd565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016102fc9190610e0a565b600060405180830381600087803b15801561031657600080fd5b505af115801561032a573d6000803e3d6000fd5b505050506103388482610521565b5050505050565b816101200135341461038f57348261012001356040517f71d5abb3000000000000000000000000000000000000000000000000000000008152600401610386929190610e25565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384346040518363ffffffff1660e01b815260040161046b929190610d7c565b6020604051808303816000875af115801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae9190610ddd565b508273ffffffffffffffffffffffffffffffffffffffff16635d31109183836040518363ffffffff1660e01b81526004016104ea929190610f05565b600060405180830381600087803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561055657610555610f37565b5b6040519080825280601f01601f1916602001820160405280156105885781602001600182028036833780820191505090505b506040516105969190610fd7565b60006040518083038185875af1925050503d80600081146105d3576040519150601f19603f3d011682016040523d82523d6000602084013e6105d8565b606091505b505090508061061c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106139061104b565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061066661066161065c84610621565b610641565b610621565b9050919050565b60006106788261064b565b9050919050565b600061068a8261066d565b9050919050565b61069a8161067f565b82525050565b60006020820190506106b56000830184610691565b92915050565b600080fd5b600080fd5b60006106d082610621565b9050919050565b6106e0816106c5565b81146106eb57600080fd5b50565b6000813590506106fd816106d7565b92915050565b600080fd5b60006101c0828403121561071f5761071e610703565b5b81905092915050565b600060a0828403121561073e5761073d610703565b5b81905092915050565b6000806000806102208587031215610762576107616106bb565b5b6000610770878288016106ee565b9450506020610781878288016106ee565b935050604061079287828801610708565b92505061020085013567ffffffffffffffff8111156107b4576107b36106c0565b5b6107c087828801610728565b91505092959194509250565b600061014082840312156107e3576107e2610703565b5b81905092915050565b60006040828403121561080257610801610703565b5b81905092915050565b60008060006101808486031215610825576108246106bb565b5b6000610833868287016106ee565b9350506020610844868287016107cc565b92505061016084013567ffffffffffffffff811115610866576108656106c0565b5b610872868287016107ec565b9150509250925092565b600060208284031215610892576108916106bb565b5b60006108a0848285016106ee565b91505092915050565b6108b2816106c5565b82525050565b60006040820190506108cd60008301856108a9565b6108da60208301846108a9565b9392505050565b600082905092915050565b600082905092915050565b82818337505050565b61090c604083836108f7565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b60006109478383610900565b60408301905092915050565b6000604082019050919050565b6109698161091b565b6109738184610926565b925061097e82610931565b8060005b838110156109b75761099482846108ec565b61099e878261093b565b96506109a983610953565b925050600181019050610982565b505050505050565b61010082016109d160008301836108ec565b6109de6000850182610900565b506109ec6040830183610910565b6109f96040850182610960565b50610a0760c08301836108ec565b610a1460c0850182610900565b50505050565b6000819050919050565b610a2d81610a1a565b8114610a3857600080fd5b50565b600081359050610a4a81610a24565b92915050565b6000610a5f6020840184610a3b565b905092915050565b610a7081610a1a565b82525050565b6000819050919050565b610a8981610a76565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b6000610abb6020840184610a97565b905092915050565b610acc81610a76565b82525050565b6101c08201610ae460008301836108e1565b610af160008501826109bf565b50610b00610100830183610a50565b610b0e610100850182610a67565b50610b1d610120830183610a50565b610b2b610120850182610a67565b50610b3a610140830183610aac565b610b48610140850182610ac3565b50610b57610160830183610aac565b610b65610160850182610ac3565b50610b74610180830183610aac565b610b82610180850182610ac3565b50610b916101a0830183610aac565b610b9f6101a0850182610ac3565b50505050565b6000610bb460208401846106ee565b905092915050565b610bc5816106c5565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610bf757610bf6610bd5565b5b83810192508235915060208301925067ffffffffffffffff821115610c1f57610c1e610bcb565b5b600182023603831315610c3557610c34610bd0565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610c7a8385610c3d565b9350610c87838584610c4e565b610c9083610c5d565b840190509392505050565b600060a08301610cae6000840184610ba5565b610cbb6000860182610bbc565b50610cc96020840184610a50565b610cd66020860182610a67565b50610ce46040840184610ba5565b610cf16040860182610bbc565b50610cff6060840184610a50565b610d0c6060860182610a67565b50610d1a6080840184610bda565b8583036080870152610d2d838284610c6e565b925050508091505092915050565b60006101e082019050610d516000830185610ad2565b8181036101c0830152610d648184610c9b565b90509392505050565b610d7681610a1a565b82525050565b6000604082019050610d9160008301856108a9565b610d9e6020830184610d6d565b9392505050565b60008115159050919050565b610dba81610da5565b8114610dc557600080fd5b50565b600081519050610dd781610db1565b92915050565b600060208284031215610df357610df26106bb565b5b6000610e0184828501610dc8565b91505092915050565b6000602082019050610e1f6000830184610d6d565b92915050565b6000604082019050610e3a6000830185610d6d565b610e476020830184610d6d565b9392505050565b6101408201610e6060008301836108e1565b610e6d60008501826109bf565b50610e7c610100830183610aac565b610e8a610100850182610ac3565b50610e99610120830183610a50565b610ea7610120850182610a67565b50505050565b600060408301610ec06000840184610bda565b8583036000870152610ed3838284610c6e565b92505050610ee46020840184610bda565b8583036020870152610ef7838284610c6e565b925050508091505092915050565b600061016082019050610f1b6000830185610e4e565b818103610140830152610f2e8184610ead565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015610f9a578082015181840152602081019050610f7f565b60008484015250505050565b6000610fb182610f66565b610fbb8185610f71565b9350610fcb818560208601610f7c565b80840191505092915050565b6000610fe38284610fa6565b915081905092915050565b600082825260208201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000611035601383610fee565b915061104082610fff565b602082019050919050565b6000602082019050818103600083015261106481611028565b905091905056fea26469706673582212201d864e723652206b0d45d106093fdccab6000538b67c529dcfe1f9b9d031113d64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c80630babd86414610044578063aef1ad0a1461006f578063c8db673b146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b506100596100b4565b60405161006691906106a0565b60405180910390f35b34801561007b57600080fd5b5061009660048036038101906100919190610747565b6100d8565b005b6100b260048036038101906100ad919061080b565b61033f565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b3073ffffffffffffffffffffffffffffffffffffffff16816000016020810190610102919061087c565b73ffffffffffffffffffffffffffffffffffffffff161461016e57806000016020810190610130919061087c565b306040517fb52905ef0000000000000000000000000000000000000000000000000000000081526004016101659291906108b8565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff16634a674fc883836040518363ffffffff1660e01b81526004016101a9929190610d3b565b600060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506000816020013590507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161025f929190610d7c565b6020604051808303816000875af115801561027e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a29190610ddd565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016102fc9190610e0a565b600060405180830381600087803b15801561031657600080fd5b505af115801561032a573d6000803e3d6000fd5b505050506103388482610521565b5050505050565b816101200135341461038f57348261012001356040517f71d5abb3000000000000000000000000000000000000000000000000000000008152600401610386929190610e25565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156103f757600080fd5b505af115801561040b573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384346040518363ffffffff1660e01b815260040161046b929190610d7c565b6020604051808303816000875af115801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae9190610ddd565b508273ffffffffffffffffffffffffffffffffffffffff16635d31109183836040518363ffffffff1660e01b81526004016104ea929190610f05565b600060405180830381600087803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b50505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561055657610555610f37565b5b6040519080825280601f01601f1916602001820160405280156105885781602001600182028036833780820191505090505b506040516105969190610fd7565b60006040518083038185875af1925050503d80600081146105d3576040519150601f19603f3d011682016040523d82523d6000602084013e6105d8565b606091505b505090508061061c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106139061104b565b60405180910390fd5b505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061066661066161065c84610621565b610641565b610621565b9050919050565b60006106788261064b565b9050919050565b600061068a8261066d565b9050919050565b61069a8161067f565b82525050565b60006020820190506106b56000830184610691565b92915050565b600080fd5b600080fd5b60006106d082610621565b9050919050565b6106e0816106c5565b81146106eb57600080fd5b50565b6000813590506106fd816106d7565b92915050565b600080fd5b60006101c0828403121561071f5761071e610703565b5b81905092915050565b600060a0828403121561073e5761073d610703565b5b81905092915050565b6000806000806102208587031215610762576107616106bb565b5b6000610770878288016106ee565b9450506020610781878288016106ee565b935050604061079287828801610708565b92505061020085013567ffffffffffffffff8111156107b4576107b36106c0565b5b6107c087828801610728565b91505092959194509250565b600061014082840312156107e3576107e2610703565b5b81905092915050565b60006040828403121561080257610801610703565b5b81905092915050565b60008060006101808486031215610825576108246106bb565b5b6000610833868287016106ee565b9350506020610844868287016107cc565b92505061016084013567ffffffffffffffff811115610866576108656106c0565b5b610872868287016107ec565b9150509250925092565b600060208284031215610892576108916106bb565b5b60006108a0848285016106ee565b91505092915050565b6108b2816106c5565b82525050565b60006040820190506108cd60008301856108a9565b6108da60208301846108a9565b9392505050565b600082905092915050565b600082905092915050565b82818337505050565b61090c604083836108f7565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b60006109478383610900565b60408301905092915050565b6000604082019050919050565b6109698161091b565b6109738184610926565b925061097e82610931565b8060005b838110156109b75761099482846108ec565b61099e878261093b565b96506109a983610953565b925050600181019050610982565b505050505050565b61010082016109d160008301836108ec565b6109de6000850182610900565b506109ec6040830183610910565b6109f96040850182610960565b50610a0760c08301836108ec565b610a1460c0850182610900565b50505050565b6000819050919050565b610a2d81610a1a565b8114610a3857600080fd5b50565b600081359050610a4a81610a24565b92915050565b6000610a5f6020840184610a3b565b905092915050565b610a7081610a1a565b82525050565b6000819050919050565b610a8981610a76565b8114610a9457600080fd5b50565b600081359050610aa681610a80565b92915050565b6000610abb6020840184610a97565b905092915050565b610acc81610a76565b82525050565b6101c08201610ae460008301836108e1565b610af160008501826109bf565b50610b00610100830183610a50565b610b0e610100850182610a67565b50610b1d610120830183610a50565b610b2b610120850182610a67565b50610b3a610140830183610aac565b610b48610140850182610ac3565b50610b57610160830183610aac565b610b65610160850182610ac3565b50610b74610180830183610aac565b610b82610180850182610ac3565b50610b916101a0830183610aac565b610b9f6101a0850182610ac3565b50505050565b6000610bb460208401846106ee565b905092915050565b610bc5816106c5565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610bf757610bf6610bd5565b5b83810192508235915060208301925067ffffffffffffffff821115610c1f57610c1e610bcb565b5b600182023603831315610c3557610c34610bd0565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610c7a8385610c3d565b9350610c87838584610c4e565b610c9083610c5d565b840190509392505050565b600060a08301610cae6000840184610ba5565b610cbb6000860182610bbc565b50610cc96020840184610a50565b610cd66020860182610a67565b50610ce46040840184610ba5565b610cf16040860182610bbc565b50610cff6060840184610a50565b610d0c6060860182610a67565b50610d1a6080840184610bda565b8583036080870152610d2d838284610c6e565b925050508091505092915050565b60006101e082019050610d516000830185610ad2565b8181036101c0830152610d648184610c9b565b90509392505050565b610d7681610a1a565b82525050565b6000604082019050610d9160008301856108a9565b610d9e6020830184610d6d565b9392505050565b60008115159050919050565b610dba81610da5565b8114610dc557600080fd5b50565b600081519050610dd781610db1565b92915050565b600060208284031215610df357610df26106bb565b5b6000610e0184828501610dc8565b91505092915050565b6000602082019050610e1f6000830184610d6d565b92915050565b6000604082019050610e3a6000830185610d6d565b610e476020830184610d6d565b9392505050565b6101408201610e6060008301836108e1565b610e6d60008501826109bf565b50610e7c610100830183610aac565b610e8a610100850182610ac3565b50610e99610120830183610a50565b610ea7610120850182610a67565b50505050565b600060408301610ec06000840184610bda565b8583036000870152610ed3838284610c6e565b92505050610ee46020840184610bda565b8583036020870152610ef7838284610c6e565b925050508091505092915050565b600061016082019050610f1b6000830185610e4e565b818103610140830152610f2e8184610ead565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015610f9a578082015181840152602081019050610f7f565b60008484015250505050565b6000610fb182610f66565b610fbb8185610f71565b9350610fcb818560208601610f7c565b80840191505092915050565b6000610fe38284610fa6565b915081905092915050565b600082825260208201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b6000611035601383610fee565b915061104082610fff565b602082019050919050565b6000602082019050818103600083015261106481611028565b905091905056fea26469706673582212201d864e723652206b0d45d106093fdccab6000538b67c529dcfe1f9b9d031113d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}