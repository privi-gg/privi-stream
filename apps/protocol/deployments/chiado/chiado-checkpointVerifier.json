{
  "address": "0x92D0A9283028aE4d4B2AAff79add531CA20fE40E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[6]",
          "name": "input",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd4c9293ba4cb73f39b630b06b0be8b8ea229e50934ed2f60269ad130d12b52f8",
  "receipt": {
    "to": null,
    "from": "0xE6D21Ad1Ea84177F365aEcdDa15573916B548943",
    "contractAddress": "0x92D0A9283028aE4d4B2AAff79add531CA20fE40E",
    "transactionIndex": 0,
    "gasUsed": "1215020",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa9b3a16f8ecf254dcd0629ac51df4d078bc1c28017483ebfb955be3daa57101d",
    "transactionHash": "0xd4c9293ba4cb73f39b630b06b0be8b8ea229e50934ed2f60269ad130d12b52f8",
    "logs": [],
    "blockNumber": 2720157,
    "cumulativeGasUsed": "1215020",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e06a6aba4af7d1b762d635419f532930",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[6]\",\"name\":\"input\",\"type\":\"uint256[6]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[6])\":{\"returns\":{\"r\":\" bool true if proof is valid\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/CheckpointVerifier.sol\":\"Verifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/CheckpointVerifier.sol\":{\"content\":\"//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// 2019 OKIMS\\n//      ported to solidity 0.6\\n//      fixed linter warnings\\n//      added requiere error messages\\n//\\n//\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.11;\\nlibrary Pairing {\\n    struct G1Point {\\n        uint X;\\n        uint Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint[2] X;\\n        uint[2] Y;\\n    }\\n    /// @return the generator of G1\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n    /// @return the generator of G2\\n    function P2() internal pure returns (G2Point memory) {\\n        // Original code point\\n        return G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n\\n/*\\n        // Changed by Jordi point\\n        return G2Point(\\n            [10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n             11559732032986387107991004021392285783925812861821192530917403151452391805634],\\n            [8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n             4082367875863433681332203403145435568316851327593401208105741076214120093531]\\n        );\\n*/\\n    }\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory r) {\\n        // The prime q in the base field F_q for G1\\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0)\\n            return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n    /// @return r the sum of two points of G1\\n    function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-add-failed\\\");\\n    }\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\\n        uint[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require (success,\\\"pairing-mul-failed\\\");\\n    }\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length,\\\"pairing-lengths-failed\\\");\\n        uint elements = p1.length;\\n        uint inputSize = elements * 6;\\n        uint[] memory input = new uint[](inputSize);\\n        for (uint i = 0; i < elements; i++)\\n        {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n        uint[1] memory out;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n        require(success,\\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(G1Point memory a1, G2Point memory a2, G1Point memory b1, G2Point memory b2) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n            G1Point memory a1, G2Point memory a2,\\n            G1Point memory b1, G2Point memory b2,\\n            G1Point memory c1, G2Point memory c2,\\n            G1Point memory d1, G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\ncontract Verifier {\\n    using Pairing for *;\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            20491192805390485299153009773594534940189261866228447918068658471970481763042,\\n            9383485363053290200918347156157836566562967994039712273449902621266178545958\\n        );\\n\\n        vk.beta2 = Pairing.G2Point(\\n            [4252822878758300859123897981450591353533073413197771768651442665752259397132,\\n             6375614351688725206403948262868962793625744043794305715222011528459656738731],\\n            [21847035105528745403288232691147584728191162732299865338377159692350059136679,\\n             10505242626370262277552901082094356697409835680220590971873171140371331206856]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n             10857046999023057135944570762232829481370756359578518086990519993285655852781],\\n            [4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n             8495653923123431417604973247489272438418190587263600148770280649306958101930]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [8454615689506319244083413811821997043308239192326579626135526163223231459347,\\n             17362060221598173644610587392015535289666617007621506640984957133910896504542],\\n            [9396225999554322361435192797243293674320625142057563654579005487304957341591,\\n             15789004851630849989210671168640201700494908198591122195358730309922809951556]\\n        );\\n        vk.IC = new Pairing.G1Point[](7);\\n        \\n        vk.IC[0] = Pairing.G1Point( \\n            15060861526734010168216286477844904355229993637784372257858807661225598721331,\\n            15782335854473927201859277395878764607851226958268085439369013557886204527848\\n        );                                      \\n        \\n        vk.IC[1] = Pairing.G1Point( \\n            8323361709224781651369475305829201238425004462710713383503141760422268731618,\\n            20743159253671874386400268726940552271770030199626695239993548864237982860068\\n        );                                      \\n        \\n        vk.IC[2] = Pairing.G1Point( \\n            18284820755937919529297322211661353529620644188973823915549142382071984473771,\\n            4022567420072740170425477163249438804149224612856113953173354304430420705764\\n        );                                      \\n        \\n        vk.IC[3] = Pairing.G1Point( \\n            5035450007505685289178174884497756238893333780612004982948606576627790722748,\\n            21550470678633707406328878099674877643578601816417293391360702881864280361628\\n        );                                      \\n        \\n        vk.IC[4] = Pairing.G1Point( \\n            4417676364714379339437273833021252979241416318037424935487508061130513612018,\\n            7595418296523286883375640695089545257542736436811885800391049677864896646380\\n        );                                      \\n        \\n        vk.IC[5] = Pairing.G1Point( \\n            3114620575656726089411088722307282516871064811542121845200949933985556469363,\\n            14896061554052107976664451319644469955513165200021268007119604261496810295862\\n        );                                      \\n        \\n        vk.IC[6] = Pairing.G1Point( \\n            21631551124487229405706882606297876160724270879540984383993755648476461080318,\\n            13596355321656544293578277037914838280698873599764413313595380525695700436950\\n        );                                      \\n        \\n    }\\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.IC.length,\\\"verifier-bad-input\\\");\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field,\\\"verifier-gte-snark-scalar-field\\\");\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.IC[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.IC[0]);\\n        if (!Pairing.pairingProd4(\\n            Pairing.negate(proof.A), proof.B,\\n            vk.alfa1, vk.beta2,\\n            vk_x, vk.gamma2,\\n            proof.C, vk.delta2\\n        )) return 1;\\n        return 0;\\n    }\\n    /// @return r  bool true if proof is valid\\n    function verifyProof(\\n            uint[2] memory a,\\n            uint[2][2] memory b,\\n            uint[2] memory c,\\n            uint[6] memory input\\n        ) public view returns (bool r) {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        uint[] memory inputValues = new uint[](input.length);\\n        for(uint i = 0; i < input.length; i++){\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x92fcbee24da4cb643f797091e275a203fb2dad18a4996da9bc10bc4aecb3bac5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061150e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f398789b14610030575b600080fd5b61018f60048036036101c081101561004757600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b828210156100fc578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100a8565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060c001906006806020026040519081016040528092919082600660200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101a9565b604051808215151515815260200191505060405180910390f35b60006101b3611396565b6040518060400160405280876000600281106101cb57fe5b60200201518152602001876001600281106101e257fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061021557fe5b602002015160006002811061022657fe5b602002015181526020018860006002811061023d57fe5b602002015160016002811061024e57fe5b6020020151815250815260200160405180604001604052808860016002811061027357fe5b602002015160006002811061028457fe5b602002015181526020018860016002811061029b57fe5b60200201516001600281106102ac57fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102d757fe5b60200201518152602001856001600281106102ee57fe5b602002015181525081604001819052506060600667ffffffffffffffff8111801561031857600080fd5b506040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50905060008090505b600681101561038f5784816006811061036557fe5b602002015182828151811061037657fe5b6020026020010181815250508080600101915050610350565b50600061039c82846103bc565b14156103ad576001925050506103b4565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506103ea6113c9565b6103f26105f0565b9050806080015151600186510114610472576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f76657269666965722d6261642d696e707574000000000000000000000000000081525060200191505060405180910390fd5b61047a611410565b6040518060400160405280600081526020016000815250905060008090505b865181101561057957838782815181106104af57fe5b60200260200101511061052a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640081525060200191505060405180910390fd5b61056a826105658560800151600185018151811061054457fe5b60200260200101518a858151811061055857fe5b6020026020010151610c19565b610d14565b91508080600101915050610499565b5061059c81836080015160008151811061058f57fe5b6020026020010151610d14565b90506105d26105ae8660000151610e2e565b8660200151846000015185602001518587604001518b604001518960600151610ec8565b6105e257600193505050506105ea565b600093505050505b92915050565b6105f86113c9565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f12b124952c12298b0faba913944cbcac98a381cc20767d790bffc90a2a91f01381526020017f266293eda02597699629b90d25427bd8be272283aca99c22fa7d7d8143d76ede815250815260200160405180604001604052807f14c61350b53cd688d21e632116fe1d162d5e7659f62a4d13286083014dadaf9781526020017f22e8429316ca76d80c673dfc241f0ee2be587ac5f846acf9940f8d55e0bfb5448152508152508160600181905250600767ffffffffffffffff811180156108bc57600080fd5b506040519080825280602002602001820160405280156108f657816020015b6108e3611410565b8152602001906001900390816108db5790505b50816080018190525060405180604001604052807f214c2542189c328514ba6ac10bec9412e08a11e99f0d0d6802dfafae3a731d3381526020017f22e47c4c3c7db48aa4fa9e7156587b121da632f78a011e3144e789e13fa444e8815250816080015160008151811061096557fe5b602002602001018190525060405180604001604052807f1266db14766830320bc5038589adf3f9969f493e599bf4d9949f6c98ac6580e281526020017f2ddc364ae2535738e90f3cd689c9af8de95380e25f0dbc78494989a81826432481525081608001516001815181106109d657fe5b602002602001018190525060405180604001604052807f286cd7801f155a5872b952d7e033bb62cab8859fab35d9fc5c58331b8558c6ab81526020017f08e4b146292fd9e923d9be1ba219c4df1d8078db280ecbab8a67be9f46c6c1e48152508160800151600281518110610a4757fe5b602002602001018190525060405180604001604052807f0b21f6b564a82c06018d96978baf1e26ed16bf7abff309c534f87164a89536bc81526020017f2fa52257e9f9fcc756d8f81ae351f5850c2d894f199745ef8274b724777eca9c8152508160800151600381518110610ab857fe5b602002602001018190525060405180604001604052807f09c450f36ffcbd2c78fd2b328ffe6802c060b9da4e8214615b72c187420e7cf281526020017f10cadabaa005362c8a39eb5d9c0e135a396288a100bdce190797d5032d194cec8152508160800151600481518110610b2957fe5b602002602001018190525060405180604001604052807f06e2d011f67c5f0b4f9f0820c0b24b3523dbc43bbf4fae62cf4c90b4ee6a167381526020017f20eedf3f5f8280e82c0376e062bad45ef11027ec7625ebe97781af54b6aed2368152508160800151600581518110610b9a57fe5b602002602001018190525060405180604001604052807f2fd30628cc6f5ed31d21a0bdf8c5f8a25cf5d06413e6b19b539f1b277acb1efe81526020017f1e0f43afdc3623459892d91fb529037626d70a39ace4d43c8ed05b8cc42e07d68152508160800151600681518110610c0b57fe5b602002602001018190525090565b610c21611410565b610c2961142a565b836000015181600060038110610c3b57fe5b602002018181525050836020015181600160038110610c5657fe5b6020020181815250508281600260038110610c6d57fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610c9657610c98565bfe5b5080610d0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6d756c2d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610d1c611410565b610d2461144c565b836000015181600060048110610d3657fe5b602002018181525050836020015181600160048110610d5157fe5b602002018181525050826000015181600260048110610d6c57fe5b602002018181525050826020015181600360048110610d8757fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610db057610db2565bfe5b5080610e26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6164642d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610e36611410565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610e73575060008360200151145b15610e97576040518060400160405280600081526020016000815250915050610ec3565b60405180604001604052808460000151815260200182856020015181610eb957fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610ee457600080fd5b50604051908082528060200260200182016040528015610f1e57816020015b610f0b611410565b815260200190600190039081610f035790505b5090506060600467ffffffffffffffff81118015610f3b57600080fd5b50604051908082528060200260200182016040528015610f7557816020015b610f6261146e565b815260200190600190039081610f5a5790505b5090508a82600081518110610f8657fe5b60200260200101819052508882600181518110610f9f57fe5b60200260200101819052508682600281518110610fb857fe5b60200260200101819052508482600381518110610fd157fe5b60200260200101819052508981600081518110610fea57fe5b6020026020010181905250878160018151811061100357fe5b6020026020010181905250858160028151811061101c57fe5b6020026020010181905250838160038151811061103557fe5b602002602001018190525061104a828261105a565b9250505098975050505050505050565b600081518351146110d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70616972696e672d6c656e677468732d6661696c65640000000000000000000081525060200191505060405180910390fd5b600083519050600060068202905060608167ffffffffffffffff811180156110fa57600080fd5b506040519080825280602002602001820160405280156111295781602001602082028036833780820191505090505b50905060008090505b838110156112cf5786818151811061114657fe5b60200260200101516000015182600060068402018151811061116457fe5b60200260200101818152505086818151811061117c57fe5b60200260200101516020015182600160068402018151811061119a57fe5b6020026020010181815250508581815181106111b257fe5b6020026020010151600001516000600281106111ca57fe5b60200201518260026006840201815181106111e157fe5b6020026020010181815250508581815181106111f957fe5b60200260200101516000015160016002811061121157fe5b602002015182600360068402018151811061122857fe5b60200260200101818152505085818151811061124057fe5b60200260200101516020015160006002811061125857fe5b602002015182600460068402018151811061126f57fe5b60200260200101818152505085818151811061128757fe5b60200260200101516020015160016002811061129f57fe5b60200201518260056006840201815181106112b657fe5b6020026020010181815250508080600101915050611132565b506112d8611494565b6000602082602086026020860160086107d05a03fa905080600081146112fd576112ff565bfe5b5080611373576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f70616972696e672d6f70636f64652d6661696c6564000000000000000000000081525060200191505060405180910390fd5b60008260006001811061138257fe5b602002015114159550505050505092915050565b60405180606001604052806113a9611410565b81526020016113b661146e565b81526020016113c3611410565b81525090565b6040518060a001604052806113dc611410565b81526020016113e961146e565b81526020016113f661146e565b815260200161140361146e565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806114816114b6565b815260200161148e6114b6565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea2646970667358221220212ad9585da795335d7b8d554b93efc4f1966ededf065140381514e51cf7e16164736f6c634300060b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f398789b14610030575b600080fd5b61018f60048036036101c081101561004757600080fd5b8101908080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060800190600280602002604051908101604052809291906000905b828210156100fc578382604002016002806020026040519081016040528092919082600260200280828437600081840152601f19601f820116905080830192505050505050815260200190600101906100a8565b50505050919291929080604001906002806020026040519081016040528092919082600260200280828437600081840152601f19601f82011690508083019250505050505091929192908060c001906006806020026040519081016040528092919082600660200280828437600081840152601f19601f82011690508083019250505050505091929192905050506101a9565b604051808215151515815260200191505060405180910390f35b60006101b3611396565b6040518060400160405280876000600281106101cb57fe5b60200201518152602001876001600281106101e257fe5b60200201518152508160000181905250604051806040016040528060405180604001604052808860006002811061021557fe5b602002015160006002811061022657fe5b602002015181526020018860006002811061023d57fe5b602002015160016002811061024e57fe5b6020020151815250815260200160405180604001604052808860016002811061027357fe5b602002015160006002811061028457fe5b602002015181526020018860016002811061029b57fe5b60200201516001600281106102ac57fe5b602002015181525081525081602001819052506040518060400160405280856000600281106102d757fe5b60200201518152602001856001600281106102ee57fe5b602002015181525081604001819052506060600667ffffffffffffffff8111801561031857600080fd5b506040519080825280602002602001820160405280156103475781602001602082028036833780820191505090505b50905060008090505b600681101561038f5784816006811061036557fe5b602002015182828151811061037657fe5b6020026020010181815250508080600101915050610350565b50600061039c82846103bc565b14156103ad576001925050506103b4565b6000925050505b949350505050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000190506103ea6113c9565b6103f26105f0565b9050806080015151600186510114610472576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f76657269666965722d6261642d696e707574000000000000000000000000000081525060200191505060405180910390fd5b61047a611410565b6040518060400160405280600081526020016000815250905060008090505b865181101561057957838782815181106104af57fe5b60200260200101511061052a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c640081525060200191505060405180910390fd5b61056a826105658560800151600185018151811061054457fe5b60200260200101518a858151811061055857fe5b6020026020010151610c19565b610d14565b91508080600101915050610499565b5061059c81836080015160008151811061058f57fe5b6020026020010151610d14565b90506105d26105ae8660000151610e2e565b8660200151846000015185602001518587604001518b604001518960600151610ec8565b6105e257600193505050506105ea565b600093505050505b92915050565b6105f86113c9565b60405180604001604052807f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e281526020017f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19268152508160000181905250604051806040016040528060405180604001604052807f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c81526020017f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab815250815260200160405180604001604052807f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a781526020017f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec88152508152508160200181905250604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152508152508160400181905250604051806040016040528060405180604001604052807f12b124952c12298b0faba913944cbcac98a381cc20767d790bffc90a2a91f01381526020017f266293eda02597699629b90d25427bd8be272283aca99c22fa7d7d8143d76ede815250815260200160405180604001604052807f14c61350b53cd688d21e632116fe1d162d5e7659f62a4d13286083014dadaf9781526020017f22e8429316ca76d80c673dfc241f0ee2be587ac5f846acf9940f8d55e0bfb5448152508152508160600181905250600767ffffffffffffffff811180156108bc57600080fd5b506040519080825280602002602001820160405280156108f657816020015b6108e3611410565b8152602001906001900390816108db5790505b50816080018190525060405180604001604052807f214c2542189c328514ba6ac10bec9412e08a11e99f0d0d6802dfafae3a731d3381526020017f22e47c4c3c7db48aa4fa9e7156587b121da632f78a011e3144e789e13fa444e8815250816080015160008151811061096557fe5b602002602001018190525060405180604001604052807f1266db14766830320bc5038589adf3f9969f493e599bf4d9949f6c98ac6580e281526020017f2ddc364ae2535738e90f3cd689c9af8de95380e25f0dbc78494989a81826432481525081608001516001815181106109d657fe5b602002602001018190525060405180604001604052807f286cd7801f155a5872b952d7e033bb62cab8859fab35d9fc5c58331b8558c6ab81526020017f08e4b146292fd9e923d9be1ba219c4df1d8078db280ecbab8a67be9f46c6c1e48152508160800151600281518110610a4757fe5b602002602001018190525060405180604001604052807f0b21f6b564a82c06018d96978baf1e26ed16bf7abff309c534f87164a89536bc81526020017f2fa52257e9f9fcc756d8f81ae351f5850c2d894f199745ef8274b724777eca9c8152508160800151600381518110610ab857fe5b602002602001018190525060405180604001604052807f09c450f36ffcbd2c78fd2b328ffe6802c060b9da4e8214615b72c187420e7cf281526020017f10cadabaa005362c8a39eb5d9c0e135a396288a100bdce190797d5032d194cec8152508160800151600481518110610b2957fe5b602002602001018190525060405180604001604052807f06e2d011f67c5f0b4f9f0820c0b24b3523dbc43bbf4fae62cf4c90b4ee6a167381526020017f20eedf3f5f8280e82c0376e062bad45ef11027ec7625ebe97781af54b6aed2368152508160800151600581518110610b9a57fe5b602002602001018190525060405180604001604052807f2fd30628cc6f5ed31d21a0bdf8c5f8a25cf5d06413e6b19b539f1b277acb1efe81526020017f1e0f43afdc3623459892d91fb529037626d70a39ace4d43c8ed05b8cc42e07d68152508160800151600681518110610c0b57fe5b602002602001018190525090565b610c21611410565b610c2961142a565b836000015181600060038110610c3b57fe5b602002018181525050836020015181600160038110610c5657fe5b6020020181815250508281600260038110610c6d57fe5b602002018181525050600060608360808460076107d05a03fa90508060008114610c9657610c98565bfe5b5080610d0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6d756c2d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610d1c611410565b610d2461144c565b836000015181600060048110610d3657fe5b602002018181525050836020015181600160048110610d5157fe5b602002018181525050826000015181600260048110610d6c57fe5b602002018181525050826020015181600360048110610d8757fe5b602002018181525050600060608360c08460066107d05a03fa90508060008114610db057610db2565bfe5b5080610e26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f70616972696e672d6164642d6661696c6564000000000000000000000000000081525060200191505060405180910390fd5b505092915050565b610e36611410565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905060008360000151148015610e73575060008360200151145b15610e97576040518060400160405280600081526020016000815250915050610ec3565b60405180604001604052808460000151815260200182856020015181610eb957fe5b0683038152509150505b919050565b60006060600467ffffffffffffffff81118015610ee457600080fd5b50604051908082528060200260200182016040528015610f1e57816020015b610f0b611410565b815260200190600190039081610f035790505b5090506060600467ffffffffffffffff81118015610f3b57600080fd5b50604051908082528060200260200182016040528015610f7557816020015b610f6261146e565b815260200190600190039081610f5a5790505b5090508a82600081518110610f8657fe5b60200260200101819052508882600181518110610f9f57fe5b60200260200101819052508682600281518110610fb857fe5b60200260200101819052508482600381518110610fd157fe5b60200260200101819052508981600081518110610fea57fe5b6020026020010181905250878160018151811061100357fe5b6020026020010181905250858160028151811061101c57fe5b6020026020010181905250838160038151811061103557fe5b602002602001018190525061104a828261105a565b9250505098975050505050505050565b600081518351146110d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f70616972696e672d6c656e677468732d6661696c65640000000000000000000081525060200191505060405180910390fd5b600083519050600060068202905060608167ffffffffffffffff811180156110fa57600080fd5b506040519080825280602002602001820160405280156111295781602001602082028036833780820191505090505b50905060008090505b838110156112cf5786818151811061114657fe5b60200260200101516000015182600060068402018151811061116457fe5b60200260200101818152505086818151811061117c57fe5b60200260200101516020015182600160068402018151811061119a57fe5b6020026020010181815250508581815181106111b257fe5b6020026020010151600001516000600281106111ca57fe5b60200201518260026006840201815181106111e157fe5b6020026020010181815250508581815181106111f957fe5b60200260200101516000015160016002811061121157fe5b602002015182600360068402018151811061122857fe5b60200260200101818152505085818151811061124057fe5b60200260200101516020015160006002811061125857fe5b602002015182600460068402018151811061126f57fe5b60200260200101818152505085818151811061128757fe5b60200260200101516020015160016002811061129f57fe5b60200201518260056006840201815181106112b657fe5b6020026020010181815250508080600101915050611132565b506112d8611494565b6000602082602086026020860160086107d05a03fa905080600081146112fd576112ff565bfe5b5080611373576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f70616972696e672d6f70636f64652d6661696c6564000000000000000000000081525060200191505060405180910390fd5b60008260006001811061138257fe5b602002015114159550505050505092915050565b60405180606001604052806113a9611410565b81526020016113b661146e565b81526020016113c3611410565b81525090565b6040518060a001604052806113dc611410565b81526020016113e961146e565b81526020016113f661146e565b815260200161140361146e565b8152602001606081525090565b604051806040016040528060008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180604001604052806114816114b6565b815260200161148e6114b6565b81525090565b6040518060200160405280600190602082028036833780820191505090505090565b604051806040016040528060029060208202803683378082019150509050509056fea2646970667358221220212ad9585da795335d7b8d554b93efc4f1966ededf065140381514e51cf7e16164736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[6])": {
        "returns": {
          "r": " bool true if proof is valid"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}